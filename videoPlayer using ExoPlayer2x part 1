build.gradle


implementation 'com.android.support:cardview-v7:28.0.0'
implementation 'com.android.support:recyclerview-v7:28.0.0'
implementation 'com.google.android.exoplayer:exoplayer:2.9.6'
implementation 'com.github.bumptech.glide:glide:4.10.0'

compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8

}




AndroidManifest.xml


android:appComponentFactory="androidx"
tools:replace="android:appComponentFactory"

<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />




MainActivity.xml


<androidx.recyclerview.widget.RecyclerView
    android:layout_width="match_parent"
    android:id="@+id/listVideoRecycler"
    android:layout_height="wrap_content">

</androidx.recyclerview.widget.RecyclerView>
â€ƒ





video_list.xml


<androidx.cardview.widget.CardView
    android:layout_width="match_parent"
    android:layout_height="160dp"
    app:cardElevation="3dp"
    android:layout_gravity="center"
    android:layout_margin="4dp"
    android:id="@+id/myCardview"
    app:cardUseCompatPadding="true"
    >
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:orientation="vertical"
        android:weightSum="5"
        >
        <ImageView
            android:layout_width="wrap_content"
            android:layout_height="0dp"
            android:layout_weight="4"
            android:scaleType="centerCrop"
            android:layout_gravity="center"
            android:id="@+id/iv_thmnail"
            android:contentDescription="@string/todo" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:id="@+id/txt_videoFileName"
            android:layout_weight="1"
            android:layout_margin="5dp"
            android:maxLines="1"
            android:text="@string/filename"
            />


    </LinearLayout>

</androidx.cardview.widget.CardView>





videoAdapter.java



package com.example.videoandaudioplayer.Adapter;

import android.content.Context;
import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.cardview.widget.CardView;
import androidx.recyclerview.widget.RecyclerView;

import com.bumptech.glide.Glide;
import com.example.videoandaudioplayer.MainActivity;
import com.example.videoandaudioplayer.R;
import com.example.videoandaudioplayer.videoPlayer;

import java.io.File;
import java.util.ArrayList;

public class VideoAdapter extends RecyclerView.Adapter<VideoHolder> {

    private Context context;
    private ArrayList<File> videoArrayList;

    public VideoAdapter(Context context, ArrayList<File> videoArrayList) {
        this.context = context;
        this.videoArrayList = videoArrayList;
    }

    @Override
    public VideoHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {

        View mview = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.video_list,viewGroup,false);
        return new VideoHolder(mview);
    }

    @Override
    public void onBindViewHolder(@NonNull final VideoHolder videoHolder, int i) {

        videoHolder.txtFileName.setText(MainActivity.fileArrayList.get(i).getName());
        Glide.with(context).load(videoArrayList.get(i).getPath()).thumbnail(0.2f).into(videoHolder.imageThumbnail);

                videoHolder.mCardView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

               // Intent intent = new Intent(context, videoPlayer.class);
               // intent.putExtra("position",videoHolder.getAdapterPosition());
               // intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
               // context.startActivity(intent);

            }
        });
    }

    @Override
    public int getItemCount() {
        if(videoArrayList.size()>0){
            return videoArrayList.size();
        }
        else
            return 1;
    }
}
class VideoHolder extends RecyclerView.ViewHolder{

    TextView txtFileName;
    ImageView imageThumbnail;
    CardView mCardView;

    VideoHolder(View view){
        super(view);

        txtFileName = view.findViewById(R.id.txt_videoFileName);
        imageThumbnail = view.findViewById(R.id.iv_thmnail);
        mCardView = view.findViewById(R.id.myCardview);
    }
}





MainActivity.java


package com.example.videoandaudioplayer;

import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.videoandaudioplayer.Adapter.VideoAdapter;

import java.io.File;
import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    RecyclerView myRecyclerView;
    VideoAdapter obj_adapter;
    public static int REQUEST_PERMISSION = 1;
    File directory;
    boolean bolean_permission;
    public static ArrayList<File> fileArrayList = new ArrayList<>();


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        myRecyclerView = (RecyclerView)findViewById(R.id.listVideoRecycler);

        //Phone Memory And SD Card
        directory = new File("/mnt/");

        //SD Card
        //directory = new File("/storage/");

        GridLayoutManager manager = new GridLayoutManager(MainActivity.this,2);
        myRecyclerView.setLayoutManager(manager);

        permissionForVideo();
    }

    private void permissionForVideo() {

        if ((ContextCompat.checkSelfPermission(getApplicationContext(),
                Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED)){


            if((ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,
                    Manifest.permission.READ_EXTERNAL_STORAGE))){
            }
            else{
                ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},
                        REQUEST_PERMISSION);
            }

        }
        else{
            bolean_permission = true;
            getFile(directory);
            obj_adapter = new VideoAdapter(getApplicationContext(),fileArrayList);
            myRecyclerView.setAdapter(obj_adapter);

        }



    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if(requestCode == REQUEST_PERMISSION){

            if(grantResults.length>0 && grantResults[0]  == PackageManager.PERMISSION_GRANTED){

                bolean_permission = true;
                getFile(directory);
                obj_adapter = new VideoAdapter(getApplicationContext(),fileArrayList);
                myRecyclerView.setAdapter(obj_adapter);

            }
            else{
                Toast.makeText(this, "Please Allow the Permission", Toast.LENGTH_SHORT).show();
            }



        }
    }

    public ArrayList<File> getFile(File directory){

        File listFile[] = directory.listFiles();
        if(listFile!=null && listFile.length>0){

            for(int i = 0;i<listFile.length;i++){

                if(listFile[i].isDirectory()){

                    getFile(listFile[i]);

                }

                else{
                    bolean_permission = false;
                    if(listFile[i].getName().endsWith(".mp4")){
                        for(int j=0;j<fileArrayList.size();j++){
                            if(fileArrayList.get(j).getName().equals(listFile[i].getName())){

                                bolean_permission = true;
                            }else{
                            }
                        }
                        if(bolean_permission){
                            bolean_permission =false;
                        }
                        else{
                            fileArrayList.add(listFile[i]);
                        }
                    }
                }
            }
        }
        return fileArrayList;
    }
}
